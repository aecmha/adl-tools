note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class ICON_RM_GENERIC_GENERIC_EFFECTIVE_ENTITY

inherit
	ICON_SOURCE

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			key := "rm/generic/generic_effective_entity"
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data
	
	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
				{
					#define B(q) #q
					#ifdef EIF_WINDOWS
						#define A(a,r,g,b) B(\x##b\x##g\x##r\x##a)
					#else
						#define A(a,r,g,b) B(\x##r\x##g\x##b\x##a)
					#endif

					char l_data[] =
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,00,00,00) A(FF,00,00,00) A(FF,28,28,28) A(FF,21,21,21) A(FF,00,00,00) A(FF,06,06,06) A(FF,38,38,38) 
					A(FF,09,09,09) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,00,00,00) 
					A(FF,FF,FF,FF) A(FF,F5,F5,F5) A(FF,99,99,99) A(FF,E3,E3,E3) A(FF,A7,A7,A7) A(FF,DC,DC,DC) A(FF,FF,FF,FF) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,01,00,8A) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,DF,DF,DF) A(FF,7B,7B,7B) 
					A(FF,B6,B6,B6) A(FF,FE,FE,FE) A(FF,FF,FF,FF) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,8A) 
					A(FF,01,00,8A) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,DF,DF,DF) A(FF,7B,7B,7B) A(FF,B3,B3,B3) A(FF,FE,FE,FE) A(FF,FF,FF,FF) A(FF,00,00,00) 
					A(FF,FF,FF,FF) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,8A) A(FF,01,00,8A) A(FF,01,13,A9) A(FF,00,00,00) A(FF,FF,FF,FF) A(FF,F5,F5,F5) 
					A(FF,9F,9F,9F) A(FF,E7,E7,E7) A(FF,A2,A2,A2) A(FF,DB,DB,DB) A(FF,FF,FF,FF) A(FF,00,00,00) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,8A) 
					A(FF,01,00,8A) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,00,00,00) A(FF,00,00,00) A(FF,38,38,38) A(FF,23,23,23) A(FF,00,00,00) A(FF,0D,0D,0D) A(FF,45,45,45) 
					A(FF,09,09,09) A(FF,00,00,00) A(FF,01,00,7A) A(FF,01,00,7A) A(FF,01,00,8A) A(FF,01,00,8A) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,2C,B5) 
					A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,00,7A) A(FF,01,00,8A) 
					A(FF,01,00,8A) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,3F,B2) 
					A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,67,BE) A(FF,01,00,8A) A(FF,01,00,8A) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,2C,B5) 
					A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,67,BE) A(FF,01,67,BE) 
					A(FF,FF,FF,FF) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,13,A9) A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,3F,B2) 
					A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,67,BE) A(FF,01,67,BE) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,01,13,A9) A(FF,01,2C,B5) 
					A(FF,01,2C,B5) A(FF,01,2C,B5) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,3F,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,67,BE) A(FF,01,67,BE) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,01,3F,B2) A(FF,01,3F,B2) 
					A(FF,01,50,B2) A(FF,01,50,B2) A(FF,01,50,B2) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) ;
					memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
				}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'
		do
			c_colors_0 (a_ptr, 0)
		end

end